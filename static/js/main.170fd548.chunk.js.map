{"version":3,"sources":["pages/inpCart.module.css","pages/Header.tsx","pages/inputCart.tsx","pages/preloader.tsx","pages/preloaderMini.tsx","pages/Eticket.tsx","dal/api.tsx","bll/reducer.ts","pages/E-ticketContainer.tsx","App.tsx","bll/store.ts","serviceWorker.js","index.tsx","img/Eclipse-2.2s-200px.svg"],"names":["module","exports","Header","className","inputCart","props","input","type","id","Preloader","src","preloader","alt","EticketFormRedux","reduxForm","form","notification","useRef","CartBalans","useState","editMod","setEditMod","ValueInputBalansCart","setValueInputBalansCart","useEffect","balans","editModFanc","handleSubmit","viewingCart","onSubmit","style","Cart","balansInputWrapper","ref","min","value","defaultValue","onChange","e","currentTarget","max","onBlur","PostCartAPI","balansInput","onClick","isFetching","PutCartAPI","travel","current","classList","toggle","loading","Field","name","component","Eticket","formData","cartID","ticket","toUpperCase","GetCartAPI","axios","require","default","Api","localStorage","getItem","getCartAPI","idCart","get","then","res","data","putBalansCartAPI","put","headers","postBalansCartAPI","post","initState","GetCart","cart","toggelIsFetching","IsFetching","connect","state","dispatch","a","Status","setItem","App","reducers","combineReducers","action","formReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.170fd548.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"hints\":\"inpCart_hints__2nyCv\",\"Cart\":\"inpCart_Cart__2g5jQ\",\"balans\":\"inpCart_balans__1YjrO\",\"travel\":\"inpCart_travel__CPeen\",\"Hidden\":\"inpCart_Hidden__36aoD\",\"balansInput\":\"inpCart_balansInput__2O_cs\",\"balansInputWrapper\":\"inpCart_balansInputWrapper__3qvxm\"};","import React from 'react';\r\nimport './Header.css';\r\n//import {BrowserRouter} from \"react-router-dom\";\r\nconst Header = () =>{\r\n    return <div className=\"wraper\">\r\n        <div className=\"wraper__header\">\r\n            \r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Header","/* eslint-disable react-hooks/rules-of-hooks */\r\nimport React, { useRef } from 'react';\r\nimport './Eticket.css';  \r\nimport style from './inpCart.module.css'\r\nconst inputCart = (props:any) => {\r\n      return<>\r\n       <input   {...props.input} type=\"text\"   className=\"Etiket__input\" id=\"inp\"   />  \r\n       </>\r\n}\r\n\r\n  \r\nexport default inputCart\r\n    \r\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport './preloader.css'\r\nimport preloader from '../img/Eclipse-2.2s-200px.svg'\r\nlet Preloader = () =>{\r\n    return <div className=\"preloader\"><img  src={preloader} alt=\"\"/></div>\r\n    \r\n}\r\n\r\nexport default Preloader","import React from 'react';\r\nimport './preloader.css'\r\nimport preloader from '../img/Eclipse-2.2s-200px.svg'\r\nlet Preloader = () =>{\r\n    return <div className=\"preloaderMini\"><img  src={preloader} alt=\"\"/></div>\r\n    \r\n}\r\n\r\nexport default Preloader","import React, { useRef, useState,useEffect  } from 'react';\r\nimport Header from './Header';\r\nimport { reduxForm, Field } from 'redux-form' // imported Fields\r\nimport inputCart from './inputCart'\r\nimport style from './inpCart.module.css'\r\nimport './Eticket.css';\r\nimport img from '../img/high-speed-train.svg'\r\nimport preloader from '../img/Eclipse-2.2s-200px.svg'\r\nimport Preloader from './preloader'\r\nimport PreloaderMini from './preloaderMini'\r\nimport './preloader.css'\r\n\r\n\r\nlet EticketForm: any = (props: any) => {\r\n \r\n  const notification: any = useRef(null);\r\n  const CartBalans: any = useRef(null);\r\n  const [timeEditMod, setTimeEditMod] = useState(false)\r\n  const [editMod, setEditMod] = useState(false)\r\n  const [ValueInputBalansCart, setValueInputBalansCart]:any = useState(null)\r\n \r\n  useEffect(() => {\r\n    setValueInputBalansCart(props.balans)\r\n  }, [props.balans]);\r\n  let editModFanc = (): any => {\r\n    \r\n    setEditMod(true )\r\n    editMod && setEditMod(false)\r\n  }\r\n  let hidden = (): any => notification.current.classList.toggle(\"hidden\")\r\n  let changeInputValue = (e:any):any  =>{\r\n  setValueInputBalansCart(e.currentTarget.value )\r\n    \r\n  }\r\n\r\nlet onBlurFanc = () =>{\r\n  \r\n  if(ValueInputBalansCart <= 500){\r\n    \r\n    props.PostCartAPI(ValueInputBalansCart)\r\n  }else {\r\n    \r\n  }\r\n    \r\n  editModFanc()\r\n}\r\n\r\nlet PutCart = () =>{\r\n  if (props.balans >= 8){\r\n    props.PutCartAPI()\r\n  }\r\n  else{\r\n    return  0\r\n  }\r\n  \r\n}\r\n\r\n\r\n\r\n\r\n  const { handleSubmit } = props\r\n  if (props.viewingCart) {\r\n    return <>\r\n      <span className=\"Etiket__text\">Eticket</span>\r\n      <form onSubmit={handleSubmit}>\r\n        <div className={style.Cart}>{props.Cart}</div>\r\n        {\r\n          editMod ?\r\n            <div className={style.balansInputWrapper}>\r\n              <input ref={CartBalans} min=\"0\" value={ValueInputBalansCart} defaultValue={ValueInputBalansCart} onChange={changeInputValue} max='500' onBlur={onBlurFanc} className={style.balansInput}  type='number' />\r\n              <span>UAH</span>\r\n            </div>\r\n            :\r\n            <div onClick={editModFanc}  className={style.balans}>{props.balans}\r\n              <span>UAH</span>\r\n            </div>\r\n        }\r\n        {props.isFetching && \r\n        <PreloaderMini/>\r\n\r\n        }\r\n      </form>\r\n      <button onClick={PutCart} className={style.travel}>\r\n        <span>Travel</span>\r\n      </button>\r\n      {editMod && <div onClick={hidden} ref={notification} className=\"notification__Editmod\"> <span>Balance change</span>   </div>}\r\n    </>\r\n\r\n  } else if (props.isFetching === true) {\r\n\r\n    return <div className={style.loading}>\r\n      <Preloader />\r\n    </div>\r\n  }\r\n  else {\r\n    return <>\r\n      <span className=\"Etiket__text\">Eticket</span>\r\n      <form onSubmit={handleSubmit}>\r\n        <Field name=\"ticket\" component={inputCart} />\r\n        <button className=\"Etiket__search\"><span>Search</span></button>\r\n      </form>\r\n    </>\r\n  }\r\n\r\n}\r\nconst EticketFormRedux = reduxForm({\r\n  // a unique name for the form\r\n  form: 'ticket'\r\n\r\n})(EticketForm)\r\n\r\nconst Eticket = (props: any) => {\r\n\r\n  const onSubmit = (formData: any) => {\r\n    try {\r\n      let cartID = formData.ticket.toUpperCase()\r\n      props.GetCartAPI(cartID)\r\n    } catch { }\r\n  }\r\n  \r\n\r\n  return (\r\n\r\n    <div className=\"wraper_Etiket__Page\">\r\n      <Header />\r\n      <div className=\"wraper_Etiket\">\r\n        <div className=\"Etiket\">\r\n          <div className=\"Cart\">\r\n            <div className=\"Hidden\"><img src={preloader} alt=\"\" /></div>\r\n            <EticketFormRedux {...props} onSubmit={onSubmit} />\r\n\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    </div>)\r\n}\r\n\r\nexport default Eticket","const { default: axios } = require('axios');\r\nlet cartLocal:any = localStorage.getItem('cart');\r\nexport const Api:any = {\r\n    getCartAPI(idCart:string ) { \r\n        return axios.get(`https://apieticket.herokuapp.com/getCart?cart=${idCart}`).then((res:any) => {\r\n            return res.data\r\n        })\r\n    },\r\n    putBalansCartAPI(balans:number = 8 ) {\r\n        \r\n        return axios.put(`https://apieticket.herokuapp.com/putBalansCart`,{\r\n            \"0436662A5F6A80\" : {\r\n            \"balans\": balans\r\n          }\r\n        }, {\r\n            headers: {'Content-Type': 'application/json'}\r\n        }).then((res:any) => {\r\n            return res.data\r\n        })\r\n\r\n    },\r\n    postBalansCartAPI(balans:number ) {\r\n        \r\n        return axios.post(`https://apieticket.herokuapp.com/postEditBalansCart`,{\r\n            \"0436662A5F6A80\" : {\r\n            \"balans\": balans\r\n          }\r\n        }, {\r\n            headers: {'Content-Type': 'application/json'}\r\n        }).then((res:any) => {\r\n           return res.data\r\n        })\r\n\r\n    }\r\n\r\n}\r\n\r\n   \r\nexport default Api","\r\nimport Api from '../dal/api';\r\nconst   TOGGELISFETCHING = 'toggelIsFetching'\r\nconst GETCARTBALANS = 'GetCartBalans'\r\nconst PUTCARTBALANS = 'PutCartBalans'\r\nconst POSTCARTBALANS = 'PostCartBalans'\r\n\r\nexport type initStateTyp = {\r\n    cartID: string,\r\n    balans: number | null,\r\n    isFetching : boolean,\r\n    viewingCart:boolean,\r\n\r\n\r\n }\r\n\r\n\r\nlet initState:initStateTyp = {\r\n    cartID: '',\r\n    balans: null,\r\n    isFetching : false,\r\n    viewingCart:false\r\n    \r\n}\r\n\r\nexport let CartReducer = (state = initState ,action:any ) =>{\r\n    \r\n   \r\n    switch(action.type){\r\n        case GETCARTBALANS :\r\n            return{\r\n                cartID:action.cart,\r\n                balans:action.balans,\r\n                viewingCart:true,\r\n            }\r\n\r\n          case TOGGELISFETCHING:\r\n            return{\r\n                ...state,\r\n                isFetching: action.IsFetching\r\n\r\n            }   \r\n\r\n            case POSTCARTBALANS :\r\n            return{\r\n               balans:action.balans\r\n            }\r\n     default:\r\n         return state\r\n    }\r\n    \r\n}\r\n\r\n\r\n\r\ntype actionGetCartType ={\r\n    type: typeof GETCARTBALANS,\r\n    cart:string,\r\n    balans:number,\r\n    viewingCart:boolean\r\n\r\n}\r\ntype toggelIsFetchingType ={\r\n    type: typeof TOGGELISFETCHING,\r\n    IsFetching: boolean\r\n}\r\nexport let GetCart = (cart:string,balans:number,viewingCart:boolean):actionGetCartType =>{\r\n    \r\n  return { \r\n    type:GETCARTBALANS,\r\n    cart,\r\n    balans,\r\n    viewingCart\r\n}\r\n}\r\nexport let putCart = (balans:number) =>{\r\n    \r\n    return { \r\n      type:GETCARTBALANS,\r\n      balans,\r\n      \r\n  }\r\n  }\r\n  export let postCart = (balans:number) =>{\r\n    \r\n    return { \r\n      type:POSTCARTBALANS,\r\n      balans,\r\n      \r\n  }\r\n  }\r\n\r\nexport let toggelIsFetching = (IsFetching:boolean):toggelIsFetchingType =>{\r\n    \r\n    return { \r\n    type:TOGGELISFETCHING,\r\n    IsFetching\r\n    }\r\n    \r\n}\r\n\r\n\r\nexport const GetCartAPI = (cartID:any) => async(dispatch:any) => {\r\n   \r\n    dispatch(toggelIsFetching(true))\r\n    \r\n   let data = await Api.getCartAPI(cartID)\r\n   \r\n  \r\n   if(data.Status === 'green'){\r\n    dispatch(GetCart(cartID,data.balans,true))\r\n       localStorage.setItem('cart',cartID);\r\n    }\r\n    dispatch(toggelIsFetching(false))\r\n   \r\n    \r\n}\r\n\r\nexport const PutCartAPI =  () => async(dispatch:any) => {\r\n    dispatch(toggelIsFetching(true))\r\n    let data = await Api.putBalansCartAPI()\r\n    if(data.Status === 'green'){\r\n        let cart:any = localStorage.getItem('cart');\r\n        dispatch(GetCart(cart,data.balans,true))\r\n        }\r\n    dispatch(toggelIsFetching(false))\r\n   \r\n}\r\n\r\nexport const PostCartAPI =  (balans:number) => async(dispatch:any) => {\r\n    dispatch(toggelIsFetching(true))\r\n    let data = await Api.postBalansCartAPI(balans)\r\n   \r\n        let cart:any = localStorage.getItem('cart');\r\n        if(data.Status === 'green'){\r\n            let cart:any = localStorage.getItem('cart');\r\n            dispatch(GetCart(cart,data.balans,true))\r\n            }\r\n            dispatch(toggelIsFetching(false))\r\n   \r\n  \r\n   \r\n}\r\n","import React from 'react';\r\nimport Eticket from './Eticket';\r\nimport { compose } from 'redux'\r\nimport { connect } from 'react-redux';\r\nimport {GetCart,GetCartAPI,PutCartAPI,PostCartAPI }from '../bll/reducer'\r\n\r\n\r\n\r\n\r\nlet EticketContainer = (props:any):any =>{\r\n\r\n\r\n    return <Eticket {...props} />\r\n\r\n    \r\n   \r\n}\r\nlet mapStateToProps =(state:any)=>{\r\n  \r\n  \r\n    return {\r\n        Cart:state.Cart.cartID,\r\n        viewingCart:state.Cart.viewingCart,\r\n        balans:state.Cart.balans,\r\n        isFetching:state.Cart.isFetching\r\n    }\r\n}\r\nexport default  connect(mapStateToProps,\r\n       { GetCart,\r\n        GetCartAPI,\r\n        PutCartAPI,\r\n        PostCartAPI}\r\n        )(EticketContainer)\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport EticketContainer from './pages/E-ticketContainer';\nimport {\n   Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\n\nconst App = (props:any) => {\n  return (\n<>\n   <EticketContainer  />  \n</>   \n  );\n}\n\nexport default App;\n","import {createStore,combineReducers,applyMiddleware,compose} from \"redux\";\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport {CartReducer} from './reducer';\r\nimport thunk from 'redux-thunk';\r\nconst reducers = combineReducers({\r\n    Cart:CartReducer,\r\n    form: formReducer \r\n })\r\n declare global {\r\n    interface Window {\r\n      __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n    }\r\n}\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers,  composeEnhancers(applyMiddleware(thunk)))\r\n\r\n\r\nexport default store;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { BrowserRouter } from \"react-router-dom\";\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider  } from 'react-redux'\nimport store from './bll/store'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n    <Provider store={store}><App /></Provider>        \n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/Eclipse-2.2s-200px.3ad06099.svg\";"],"sourceRoot":""}